#!/usr/bin/env python3
"""
Test REAL CrewAI Integration

This test uses the actual CrewAI framework to create AI agents and analyze market data.
"""

import sys
import os
import asyncio
import logging
from datetime import datetime

# Add project paths
project_root = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, project_root)

# Import REAL CrewAI adapter
from integration.adapters.real_crewai_adapter import RealCrewAIAdapter

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def test_real_crewai_integration():
    """Test REAL CrewAI integration with actual AI agents."""
    logger.info("üöÄ Testing REAL CrewAI Integration")
    logger.info("=" * 60)
    
    try:
        # Create REAL CrewAI adapter
        logger.info("1. Creating REAL CrewAI Adapter...")
        crewai_adapter = RealCrewAIAdapter()
        
        # Create REAL trading crew
        logger.info("2. Creating REAL Trading Crew...")
        trading_crew = crewai_adapter.create_real_trading_crew("real_trading_crew")
        
        # Test market data
        market_data = {
            'instrument_id': 'EURUSD',
            'timestamp': int(datetime.now().timestamp() * 1000),
            'open': 1.0845,
            'high': 1.0870,
            'low': 1.0840,
            'close': 1.0865,
            'volume': 2500000
        }
        
        logger.info("3. Running REAL AI Analysis...")
        logger.info(f"   Market Data: {market_data['instrument_id']} @ {market_data['close']}")
        
        # Execute REAL AI analysis
        analysis_result = await crewai_adapter.analyze_market_with_real_ai(
            "real_trading_crew", 
            market_data
        )
        
        # Display results
        logger.info("4. REAL AI Analysis Results:")
        logger.info(f"   Signal: {analysis_result.get('signal', 'UNKNOWN')}")
        logger.info(f"   Confidence: {analysis_result.get('confidence', 0):.2f}")
        logger.info(f"   Source: {analysis_result.get('source', 'unknown')}")
        logger.info(f"   Analysis Type: {analysis_result.get('analysis_type', 'unknown')}")
        
        if analysis_result.get('reasoning'):
            logger.info("   AI Reasoning:")
            reasoning_lines = str(analysis_result['reasoning']).split('\n')[:5]  # First 5 lines
            for line in reasoning_lines:
                if line.strip():
                    logger.info(f"     {line.strip()}")
        
        # Test crew status
        logger.info("5. Crew Status:")
        crew_status = crewai_adapter.get_crew_status("real_trading_crew")
        logger.info(f"   Status: {crew_status.get('status', 'unknown')}")
        logger.info(f"   Agents: {crew_status.get('agents_count', 0)}")
        logger.info(f"   Type: {crew_status.get('crew_type', 'unknown')}")
        
        # Test agent info
        logger.info("6. Agent Information:")
        agents = crewai_adapter.list_agents()
        for agent_name in agents:
            agent_info = crewai_adapter.get_agent_info(agent_name)
            logger.info(f"   {agent_name}:")
            logger.info(f"     Role: {agent_info.get('role', 'unknown')}")
            logger.info(f"     Tools: {agent_info.get('tools_count', 0)}")
            logger.info(f"     Type: {agent_info.get('agent_type', 'unknown')}")
        
        logger.info("\n" + "=" * 60)
        logger.info("‚úÖ REAL CrewAI Integration Test COMPLETED!")
        logger.info("‚úÖ REAL AI agents created and functioning")
        logger.info("‚úÖ REAL AI analysis executed successfully")
        logger.info("‚úÖ Trading signals generated by REAL AI")
        logger.info("‚úÖ Integration with actual CrewAI framework working")
        
        return analysis_result
        
    except Exception as e:
        logger.error(f"‚ùå REAL CrewAI integration test failed: {str(e)}")
        import traceback
        traceback.print_exc()
        raise


async def test_multiple_market_scenarios():
    """Test REAL CrewAI with multiple market scenarios."""
    logger.info("\nüîç Testing REAL AI with Multiple Market Scenarios")
    logger.info("=" * 60)
    
    crewai_adapter = RealCrewAIAdapter()
    trading_crew = crewai_adapter.create_real_trading_crew("scenario_test_crew")
    
    scenarios = [
        {
            'name': 'High Volume Breakout',
            'data': {
                'instrument_id': 'EURUSD',
                'timestamp': int(datetime.now().timestamp() * 1000),
                'open': 1.0850,
                'high': 1.0890,
                'low': 1.0845,
                'close': 1.0885,
                'volume': 3500000
            }
        },
        {
            'name': 'Low Volume Consolidation',
            'data': {
                'instrument_id': 'GBPUSD',
                'timestamp': int(datetime.now().timestamp() * 1000),
                'open': 1.2500,
                'high': 1.2505,
                'low': 1.2495,
                'close': 1.2502,
                'volume': 800000
            }
        }
    ]
    
    results = []
    
    for scenario in scenarios:
        logger.info(f"\n--- Scenario: {scenario['name']} ---")
        
        try:
            result = await crewai_adapter.analyze_market_with_real_ai(
                "scenario_test_crew",
                scenario['data']
            )
            
            logger.info(f"Signal: {result.get('signal', 'UNKNOWN')}")
            logger.info(f"Confidence: {result.get('confidence', 0):.2f}")
            logger.info(f"Instrument: {result.get('instrument_id', 'UNKNOWN')}")
            
            results.append(result)
            
        except Exception as e:
            logger.error(f"Scenario {scenario['name']} failed: {str(e)}")
            
    logger.info(f"\n‚úÖ Completed {len(results)} scenario tests")
    return results


async def main():
    """Main test function."""
    logger.info("ü§ñ REAL CrewAI Integration Testing Suite")
    logger.info("Testing actual CrewAI framework integration")
    logger.info("=" * 80)
    
    try:
        # Test 1: Basic REAL CrewAI Integration
        basic_result = await test_real_crewai_integration()
        
        # Test 2: Multiple Scenarios
        scenario_results = await test_multiple_market_scenarios()
        
        logger.info("\n" + "=" * 80)
        logger.info("üéâ ALL REAL CrewAI TESTS PASSED!")
        logger.info("‚úÖ REAL CrewAI framework successfully integrated")
        logger.info("‚úÖ REAL AI agents creating actual trading analysis")
        logger.info("‚úÖ Multiple market scenarios tested")
        logger.info("‚úÖ Trading signals generated by actual AI")
        logger.info("‚úÖ Ready for Nautilus Trader integration")
        
        logger.info(f"\nüìä Test Summary:")
        logger.info(f"‚Ä¢ Basic integration: {'‚úÖ PASSED' if basic_result else '‚ùå FAILED'}")
        logger.info(f"‚Ä¢ Scenario tests: {len(scenario_results)} completed")
        logger.info(f"‚Ä¢ AI agents: REAL CrewAI framework")
        logger.info(f"‚Ä¢ Analysis type: Comprehensive AI-powered")
        
    except Exception as e:
        logger.error(f"‚ùå REAL CrewAI testing failed: {str(e)}")
        raise


if __name__ == "__main__":
    asyncio.run(main())